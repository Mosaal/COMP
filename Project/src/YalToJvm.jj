/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. YalToJvm.jj */
/*@egen*/options {
	LOOKAHEAD = 1;
}

PARSER_BEGIN(YalToJvm)

import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.File;
import java.util.*;

public class YalToJvm/*@bgen(jjtree)*/implements YalToJvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTYalToJvmState jjtree = new JJTYalToJvmState();

/*@egen*/

	private static Module module;
	public static ArrayList<String> semanticErrorMessages = new ArrayList<String>();

	public static void main(String[] args) throws ParseException, FileNotFoundException {
		File file = new File(args[0]);
		FileInputStream fs = new FileInputStream(file);
		YalToJvm parser = new YalToJvm(fs);
		SimpleNode root = parser.Module();
		root.dump("");
		root.getFunctions();
		module.processFunctions();
		module.printSymbolTables();
		printSemanticErrors();
	}

	public static Module getModule(){
		return module;
	}

	public static void printSemanticErrors(){
		System.out.println("---------------\nSEMANTIC ERRORS:");
		for (int i = 0; i < semanticErrorMessages.size(); i++) {
			System.out.println(semanticErrorMessages.get(i));
		}
	}
}

PARSER_END(YalToJvm)

<DEFAULT> SKIP: {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

<DEFAULT> TOKEN: {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
}

<DEFAULT> TOKEN: {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: <ASPA> (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ <ASPA>>
}

SimpleNode Module()        : {/*@bgen(jjtree) Module */
                              SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token moduleID;}
{/*@bgen(jjtree) Module */
        try {
/*@egen*/
	<MODULE> moduleID=<ID> {
		jjtn000.ID = moduleID.image;
		module = new Module(moduleID.image);
	} <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>/*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                               }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration()        : {/*@bgen(jjtree) Global */
                             SimpleNode jjtn000 = new SimpleNode(JJTGLOBAL);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token assign;}
{/*@bgen(jjtree) Global */
        try {
/*@egen*/
	GlobalLeft() (assign=<ASSIGN> { jjtn000.assign = assign.image; } GlobalRight())? <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GlobalLeft()      : {}
{
	LOOKAHEAD(2) ArrayElement(false) | ScalarElement(false)
}

void GlobalRight(): {/*@bgen(jjtree) GlobalRight */
                     SimpleNode jjtn000 = new SimpleNode(JJTGLOBALRIGHT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token op, intID;}
{/*@bgen(jjtree) GlobalRight */
        try {
/*@egen*/
	("[" ArraySize() "]") | ((op=<ADDSUB_OP> {
		jjtn000.Op = op.image;
	})? intID=<INTEGER>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
		jjtn000.ID = intID.image;
	})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Function()          : {/*@bgen(jjtree) Function */
                            SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token functionID;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	(LOOKAHEAD(3) (<FUNCTION> (LOOKAHEAD(2) ArrayElement(true) | ScalarElement(true)) <ASSIGN> functionID=<ID> {
		jjtn000.ID = functionID.image;
	} <LPAR> (Varlist())? <RPAR>) | (<FUNCTION> functionID=<ID> {
		jjtn000.ID = functionID.image;
	} <LPAR> (Varlist())? <RPAR>)) <LCHAVETA> FunctionBody() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Varlist()        : {/*@bgen(jjtree) Params */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Params */
        try {
/*@egen*/
	(LOOKAHEAD(2) ArrayElement(false) | ScalarElement(false)) (<VIRG> (LOOKAHEAD(2) ArrayElement(false) | ScalarElement(false)))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement(boolean ret)       : {/*@bgen(jjtree) Array */
                                         SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token arrayElem; }
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	arrayElem=<ID> {
		if (ret) jjtn000.ret = ret;
		jjtn000.ID = arrayElem.image;
	} "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarElement(boolean ret)        : {/*@bgen(jjtree) Scalar */
                                           SimpleNode jjtn000 = new SimpleNode(JJTSCALAR);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token scalarElem; }
{/*@bgen(jjtree) Scalar */
        try {
/*@egen*/
	scalarElem=<ID>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
		if (ret) jjtn000.ret = ret;
		jjtn000.ID = scalarElem.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionBody(): {/*@bgen(jjtree) FunctionBody */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionBody */
        try {
/*@egen*/
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileBody(): {/*@bgen(jjtree) WhileBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileBody */
        try {
/*@egen*/
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfBody(): {/*@bgen(jjtree) IfBody */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfBody */
        try {
/*@egen*/
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseBody(): {/*@bgen(jjtree) ElseBody */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseBody */
        try {
/*@egen*/
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmt()      : {}
{
	While() | If() | LOOKAHEAD(3) Assign() | Call() <PVIRG>
}

void Assign()             : {/*@bgen(jjtree) Assignement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignement */
        try {
/*@egen*/
	Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lhs()      : {}
{
	LOOKAHEAD(2) ArrayAccess() | ScalarAccess()
}

void Rhs(): {/*@bgen(jjtree) Rhs */
             SimpleNode jjtn000 = new SimpleNode(JJTRHS);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token op;}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	(Term() ((op=<ARITH_OP> {
		jjtn000.Op = op.image;
	} | op=<BITWISE_OP> {
		jjtn000.Op = op.image;
	} | op=<ADDSUB_OP> {
		jjtn000.Op = op.image;
	}) Term())?) | "[" ArraySize() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArraySize(): {/*@bgen(jjtree) ArraySize */
                   SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token intID;}
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
	ScalarAccess() | intID=<INTEGER>/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { jjtn000.ID = intID.image; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Term(): {/*@bgen(jjtree) Term */
              SimpleNode jjtn000 = new SimpleNode(JJTTERM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token op, intID;}
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	(op=<ADDSUB_OP> {
		jjtn000.Op = op.image;
	})? (intID=<INTEGER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {
		jjtn000.ID = intID.image;
	} | LOOKAHEAD(3) Call() | LOOKAHEAD(2) ArrayAccess() | ScalarAccess())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Exprtest()           : {/*@bgen(jjtree) Condition */
                             SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token relaOpID;}
{/*@bgen(jjtree) Condition */
        try {
/*@egen*/
	<LPAR> Lhs() relaOpID=<RELA_OP> { jjtn000.ID = relaOpID.image; } Rhs() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void While(): {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<WHILE> Exprtest() <LCHAVETA> WhileBody() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If(): {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	<IF> Exprtest() <LCHAVETA> IfBody() <RCHAVETA> (<ELSE> <LCHAVETA> ElseBody() <RCHAVETA>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Call(): {/*@bgen(jjtree) Call */
              SimpleNode jjtn000 = new SimpleNode(JJTCALL);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token id, callID;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
	id=<ID> {
		jjtn000.ID = id.image;
	} ("." callID=<ID> {
		jjtn000.call = true;
		jjtn000.callID = callID.image;
	})? <LPAR> (ArgumentList())? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList()      : {}
{
	Argument() (<VIRG> Argument())*
}

void Argument(): {/*@bgen(jjtree) Argument */
                  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token argID;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	argID=<ID>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
		jjtn000.ID = argID.image;
	} | argID=<STRING>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {
		jjtn000.ID = argID.image;
	} | argID=<INTEGER>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
		jjtn000.ID = argID.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess(): {/*@bgen(jjtree) ArrayAccess */
                     SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token arrayID;}
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	arrayID=<ID> { jjtn000.ID = arrayID.image; } "[" Index() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarAccess(): {/*@bgen(jjtree) ScalarAccess */
                      SimpleNode jjtn000 = new SimpleNode(JJTSCALARACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token scalarID, size;}
{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/
	scalarID=<ID> { jjtn000.ID = scalarID.image; } ("." size=<SIZE> { jjtn000.size = size.image; })?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Index(): {/*@bgen(jjtree) Index */
               SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token id, intID;}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	id=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
		jjtn000.ID = id.image;
	} | intID=<INTEGER>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
		jjtn000.ID = intID.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}