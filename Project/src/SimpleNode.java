import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.0 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {
	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected YalToJvm parser;

	//added
	public String ID;
	public String callID;
	public String Op = "";
	public String size = "";
	public String assign = "";
	public boolean ret = false;
	public boolean call = false;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(YalToJvm p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) { parent = n; }
	public Node jjtGetParent() { return parent; }

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) { this.value = value; }
	public Object jjtGetValue() { return value; }

	/* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

	public String toString() {
		return YalToJvmTreeConstants.jjtNodeName[id];
	}
	public String toString(String prefix) { return prefix + toString(); }
	
	public String newPrefix(String prefix, boolean increase) {
		String newPrefix = "";
		
		if (!increase) {
			for (int i = 0; i < prefix.length() - 1; i++)
				newPrefix += " ";
		} else {
			for (int i = 0; i < prefix.length() + 1; i++)
				newPrefix += " ";
		}
		
		return newPrefix;
	}

	/* Override this method if you want to customize how the node dumps
     out its children. */

	public void dump(String prefix) {
		//System.out.println(toString(prefix));
		switch (id) {
		case YalToJvmTreeConstants.JJTMODULE:
			System.out.println(toString(prefix) + " \"" + ID + "\"");
			break;
		case YalToJvmTreeConstants.JJTGLOBAL:
			if (assign != "")
				System.out.println(prefix + "[ = ]");
			else
				prefix = newPrefix(prefix, false);
			break;
		case YalToJvmTreeConstants.JJTGLOBALRIGHT:
			if (Op != "" || ID != null)
				System.out.println(newPrefix(prefix, true) + "[ " + Op + ID + " ]");
			break;
		case YalToJvmTreeConstants.JJTFUNCTION:
			System.out.println(toString(prefix) + " \"" + ID + "\"");
			break;
		case YalToJvmTreeConstants.JJTPARAMS:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTARRAY:
			if (ret)
				System.out.println(prefix + "Return\n   [ " + ID + "[] ]");
			else
				System.out.println(prefix + "[ " + ID + "[] ]");
			break;
		case YalToJvmTreeConstants.JJTSCALAR:
			if (ret)
				System.out.println(prefix + "Return\n   [ " + ID + " ]");
			else
				System.out.println(prefix + "[ " + ID + " ]");
			break;
		case YalToJvmTreeConstants.JJTFUNCTIONBODY:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTWHILEBODY:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTIFBODY:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTELSEBODY:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTASSIGNEMENT:
			System.out.println(prefix + "[ = ]");
			break;
		case YalToJvmTreeConstants.JJTRHS:
			if (Op != "")
				System.out.println(prefix + "[ " + Op + " ]");
			break;
		case YalToJvmTreeConstants.JJTARRAYSIZE:
			System.out.println(prefix + "[ [" + ID + "] ]");
			break;
		case YalToJvmTreeConstants.JJTTERM:
			if (Op != "" || ID != null) {
				SimpleNode temp = (SimpleNode)parent;
				if (temp.Op.equals("+") || temp.Op.equals("-"))
					System.out.println(newPrefix(prefix, true) + "[ " + Op + ID + " ]");
				else if (temp.Op.equals("*") || temp.Op.equals("/") || temp.Op.equals("<<") || temp.Op.equals(">>") || temp.Op.equals(">>>"))
					System.out.println(newPrefix(prefix, true) + "[ " + Op + ID + " ]");
				else if (temp.Op.equals("&") || temp.Op.equals("|") || temp.Op.equals("^"))
					System.out.println(newPrefix(prefix, true) + "[ " + Op + ID + " ]");
				else
					System.out.println(prefix + "[ " + Op + ID + " ]");
			}
			break;
		case YalToJvmTreeConstants.JJTCONDITION:
			System.out.println(prefix + "[ " + ID + " ]");
			break;
		case YalToJvmTreeConstants.JJTWHILE:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTIF:
			System.out.println(toString(prefix));
			break;
		case YalToJvmTreeConstants.JJTCALL:
			if (!call)
				System.out.println(toString(prefix) + " \"" + ID + "\"");
			else
				System.out.println(toString(prefix) + " \"" + callID + "\" of \"" + ID + "\"");
			break;
		case YalToJvmTreeConstants.JJTARGUMENT:
			System.out.println(prefix + "[ " + ID + " ]");
			break;
		case YalToJvmTreeConstants.JJTARRAYACCESS:
			SimpleNode temp = (SimpleNode)children[0];
			System.out.println(prefix + "[ " + ID + "[" + temp.ID + "]" + " ]");
			break;
		case YalToJvmTreeConstants.JJTSCALARACCESS:
			if (size == "")
				System.out.println(prefix + "[ " + ID + " ]");
			else
				System.out.println(prefix + "[ " + ID + ".size ]");
			break;
		}

		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode)children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	/**
	 * Analyses the AST and looks for functions.
	 * Adds them in the symbol table and returns any
	 * kind of semantic error message
	 * @param prefix
	 */
	public void getFunctions() {
		switch (id) {
		case YalToJvmTreeConstants.JJTFUNCTION:
			String name = ID;
			ArrayList<Variable> params = getParams();
			Function f = new Function(name,params,(SimpleNode)children[children.length-1]);
			YalToJvm.getModule().addFunction(f);
			break;
		default:
			if (children != null) {
				for (int i = 0; i < children.length; ++i) {
					SimpleNode n = (SimpleNode)children[i];
					if (n != null) {
						n.getFunctions();
					}
				}
			}
		}
	}

	public ArrayList<Variable> getParams(){
		ArrayList<Variable> params = new ArrayList<>();
		SimpleNode paramNode = (SimpleNode)children[0];
		if(paramNode.id == YalToJvmTreeConstants.JJTPARAMS){
			int num = paramNode.jjtGetNumChildren();
			for (int i = 0; i < num; i++) {
				SimpleNode node = (SimpleNode)paramNode.jjtGetChild(i);
				if(node.id == YalToJvmTreeConstants.JJTSCALAR)
					params.add(new Scalar(node.ID));
				else if(node.id == YalToJvmTreeConstants.JJTARRAY)
					params.add(new Array(node.ID));
			}
		}
		return params;
	}
	
	/**
	* Method used to process the body of a function
	*/
	public void processBody(){
		
	}

	public int getId() {
		return id;
	}
}

/* JavaCC - OriginalChecksum=45cdfa7b6c656a79cec0656f2db154c7 (do not edit this line) */
